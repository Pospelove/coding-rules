// DynamicFields.h
class DynamicFields {
public:
    // Old function - will be replaced.
    void Set(const std::string& propName, int value);
    // New function - operates on a different type.
    void SetValueAsString(const std::string& propName, const std::string& value);
private:
    // Storage changed to string.
    std::unordered_map<std::string, std::string> props;
};

// SomeOtherFile.cpp
void UpdateUserValue(DynamicFields& fields, int newValue) {
    // This will now cause a compile error.
    // fields.Set("userValue", newValue);
    // Corrected call:
    fields.SetValueAsString("userValue", std::to_string(newValue)); // Compiler forces adaptation.
}
