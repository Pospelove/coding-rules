# .github/workflows/create-code-image.yml

name: Generate and Commit Code Image

# This workflow now triggers on pushes to the specified branch(es)
# when files matching the path pattern are modified.
on:
  push:
    branches:
      - main # Or your default branch, e.g., master
    paths:
      - 'linkedin/**.example'

# Grant the GITHUB_TOKEN permissions to write content back to the repository.
permissions:
  contents: write

jobs:
  generate-and-commit-image:
    name: Generate & Commit Carbon Image
    runs-on: ubuntu-latest
    # This condition prevents the job from running on deleted files.
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        # We need to fetch the entire history to accurately determine changed files.
        with:
          fetch-depth: 0

      - name: üìù Get Changed Files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          # This pattern ensures we only act on the files that triggered the workflow.
          files: linkedin/**.example

      - name: ‚öôÔ∏è Set up Node.js
        # This step only runs if there were matching files changed.
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: üñºÔ∏è Generate Image for Each Changed File
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          # Loop through each modified '.example' file.
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "üé® Processing $file..."
            # Dynamically determine the output directory and filename.
            # For example, 'linkedin/script.js.example' becomes 'linkedin/script.js'.
            DIR=$(dirname "$file")
            FILENAME=$(basename "$file" .example)
            
            # Generate the image and save it to the same directory as the source file.
            npx carbon-now-cli "$file" --save-to "$DIR" --save-as "$FILENAME"
          done

      - name: üíæ Commit and Push PNG Files
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          # Configure git with bot credentials.
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Add all newly generated or updated PNG files.
          git add linkedin/**/*.png
          
          # Check if there are any changes to commit to avoid empty commits.
          if ! git diff --staged --quiet; then
            git commit -m "docs

